kind Term : type
kind Variable : atom

operator Var : Variable -> Term
operator App : Term * Term -> Term
operator Lambda : [Variable]. Term -> Term
operator Subst : [Variable]. Term * Term -> Term

rule [beta] :
  App(Lambda(?x, ?T), ?U)  => Subst(?x, ?T, ?U)

rule [subst-var] :
  Subst(?x, ?T, Var(?x)) => ?T

rule [subst-nvar] :
  Subst(?x, ?T, Var(?y)) => Var(?y)

rule [app] :
  Subst(?x, ?T, App(?M, ?N)) => App(Subst(?x, ?T, ?M), Subst(?x, ?T, ?N))

rule [lambda] :
  Subst(?x, ?T, Lambda(?y, ?U)) => Lambda(?y, Subst(?x, ?T, ?U))

rule [is-lambda] :
  Lambda(?x, ?T) => Lambda(?x, ?T)

rule [is-left-app] : 
  App(App(?x, ?y), ?U) => App(App(?x, ?y), ?U)

rule [is-right-lambda] :
  App(?x, Lambda(?y, ?U)) => App(?x, Lambda(?y, ?U))

strategy IsValue :
  test([is-lambda])

strategy IsRightValue :
  test([is-right-lambda])

strategy IsLeftApp :
  test([is-left-app])

# strategy CallByValue : TODO
    
:test rewrite Lambda(x, Var(x)) with id() --equal Lambda(x, Var(x))
:test rewrite Lambda(x, Var(x)) with CallByValue --equal Lambda(x, Var(x))
#:test rewrite App(Lambda(x, Var(x)),Lambda(x, Var(x))) with CallByValue --equal Lambda(x, Var(x))
